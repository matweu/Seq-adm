Дорой дневник, мне не подобрать слов... (Надеюсь, кто-то поймет шутку, скорее всего Серега))
Прототип обнаружения аномальных последовательностей событий SeqAdm Machine Learning.
Автор Прототип - Жуков Матвей, отдел ЦНИПР.

Прототип представляет из себя 2 блока программ, основной блок написан на C++, 
на Python реализована модель нейроной сети с LSTM сетью:

Для работы с прототипом необходимо установить следующие библиотеки для языков:
С++:
json{nlohmann}

Вместе с sln файлом,от Microsoft VS 2022 (v143), идет библиотека json, но ее так же можно скачать
по ссылке https://github.com/nlohmann/json, для этого необходимо воспользоваться git:

>git clone https://github.com/nlohmann/json 

Настройка зависимостей Microsoft VS 2022 (v143), подробно будет описана в SeqAdm.docx

Python:
Зависимости от сторонних библиотек и их версий перечислены в requirements.txt.
Для установки библиотек необходимо воспользоваться pip:

> pip install -r requirements.txt


Сам прототип SeqAdm при работе запрашивает от пользователя информацию о обучении модели, 
промежутке времени сбора [Event id], пути сохранения модели и начале поиска аномалий.
После сбора информации, за выбранный промежуток времени, модель обучается на собранных данных,
сохраняется в {$Dir}/SeqAdm (создается при первом сохранении). Дальше по пути {$Dir} 
создается файл "detected_anomalies.txt", в который записываются подозрительные Event ID с
величиной их ошибки, вывод данных показан в SeqAdm.docx.
{$Dir} - директория, которая запрашивается программой при загрузке модели без обучения.
При тренировке модели, путь автоматически устанавливается, такой же, где расположена модель.

К макету также  прилагаются следующие файлы:
     -CollectorEvent.h
	CollectorEvent.cpp - Файлы с реализацией сбора Event ID, и классом записи информации о них.
   
     -dumpJson.h
	dumpJson.cpp - Файлы с сериализации и десериализации 

    -protatipefuncr.h
	protatipefunc.cpp - Файлы с перечисляемыми типами, 
				вспомогательными функциями (Первевод в Unix дату и т.д)

    - Seq_ADM_utils.py - библиотека собственных функций написанных на языке Python

	
    
   

Подробнее о принципе работы прототипа можно узнать  в SeqAdm.dock и Proto.dock
